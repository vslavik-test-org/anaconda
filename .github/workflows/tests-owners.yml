name: Run validation tests for owners
on: [push, pull_request_target]

jobs:
  pr-info:
    runs-on: ubuntu-latest
    steps:
      - name: Query author repository permissions
        uses: octokit/request-action@v2.x
        id: user_permission
        with:
          route: GET /repos/${{ github.repository }}/collaborators/${{ github.event.sender.login }}/permission
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # restrict running of tests to users with admin or write permission for the repository
      # see https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-repository-permissions-for-a-user
      # store output if user is allowed in allowed_user job output so it has to be checked in downstream job
      - name: Check if user does have correct permissions
        if: contains('admin write', fromJson(steps.user_permission.outputs.data).permission)
        id: check_user_perm
        run: |
          echo "User '${{ github.event.sender.login }}' has permission '${{ fromJson(steps.user_permission.outputs.data).permission }}' allowed values: 'admin', 'write'"
          echo "::set-output name=allowed_user::true"

    outputs:
      allowed_user: ${{ steps.check_user_perm.outputs.allowed_user }}

  unit-tests-fedora:
    needs: pr-info
    if: needs.pr-info.outputs.allowed_user == 'true' && contains(matrix.run-for-branches, needs.pr-info.outputs.base_ref)
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        release: ['master', 'eln', 'f34-devel', 'f34-release']
        include:
          - release: master
            name-postfix: ' (master)'
            rebase-to-branch: 'master'
            run-for-branches: ['master', 'f34-devel']
          - release: eln
            name-postfix: ' (eln)'
            rebase-to-branch: 'master'
            build-args: '--build-arg=image=quay.io/fedoraci/fedora:eln-x86_64'
            run-for-branches: ['master', 'f34-devel']
          - release: f34-devel
            name-postfix: ' (f34-devel)'
            rebase-to-branch: 'f34-devel'
            run-for-branches: ['f34-devel']
          - release: f34-release
            name-postfix: ' (f34-release)'
            rebase-to-branch: 'f34-release'
            run-for-branches: ['f34-devel', 'f34-release']
    env:
      CI_TAG: '${{ matrix.release }}'
      CONTAINER_BUILD_ARGS: '${{ matrix.build-args }}'
      TARGET_BRANCH_NAME: 'origin/${{ needs.pr-info.outputs.base_ref }}'
      REBASE_BRANCH_NAME: 'origin/${{ matrix.rebase-to-branch }}'

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # otherwise we are testing target branch instead of the PR branch (see pull_request_target trigger)
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Rebase to current target branch
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.REBASE_BRANCH_NAME }}
          git rebase origin/${{ env.REBASE_BRANCH_NAME }}

      - name: Check if rebuild of the container image is required
        id: check-dockerfile-changed
        run: |
          changes=$(git diff ${{ env.REBASE_BRANCH_NAME }}..HEAD -- dockerfile/anaconda-ci/ anaconda.spec.in scripts/testing/install_dependencies.sh)
          # print for debugging
          echo "$changes"
          [ -z "$changes" ] || echo "::set-output name=changed::true"

      # build container if files for dockerfile changed in the PR
      - name: Build anaconda-ci container
        # FIXME: always build ELN container, until we publish it to quay.io
        if: steps.check-dockerfile-changed.outputs.changed || matrix.release == 'eln'
        run: make -f Makefile.am anaconda-ci-build

      - name: Run tests in anaconda-ci container
        run: |
          # put the log in the output, where it's easy to read and link to
          make -f Makefile.am container-ci || { cat test-logs/test-suite.log; exit 1; }

      - name: Upload test and coverage logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs${{ matrix.name-postfix }}'
          path: test-logs/*

  rpm-tests:
    needs: pr-info
    if: needs.pr-info.outputs.allowed_user == 'true'
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        # empty = release that corresponds to current branch name
        release: ['', 'eln']
        include:
          - release: eln
            name-postfix: ' (eln)'
            build-args: '--build-arg=image=quay.io/fedoraci/fedora:eln-x86_64'
    env:
      CI_TAG: '${{ matrix.release }}'
      CONTAINER_BUILD_ARGS: '${{ matrix.build-args }}'
      TARGET_BRANCH_NAME: origin/master

    steps:
      - name: Clone repository
        uses: actions/checkout@v2
        with:
          # otherwise we are testing target branch instead of the PR branch (see pull_request_target trigger)
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Rebase to current master
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git log --oneline -1 ${{ env.TARGET_BRANCH_NAME }}
          git rebase ${{ env.TARGET_BRANCH_NAME }}

      - name: Build RPM test container
        run: make -f Makefile.am anaconda-rpm-build

      - name: Run RPM tests in container
        run: make -f Makefile.am container-rpm-test

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'logs-rpm-test${{ matrix.name-postfix }}'
          path: test-logs/*
